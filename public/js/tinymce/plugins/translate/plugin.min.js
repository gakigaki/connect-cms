tinymce.PluginManager.add('translate', function(editor, url) {
    // add: tinymce5対応
    editor.ui.registry.addIcon('translate', '<img src="'+tinymce.activeEditor.getParam('document_base_url')+'/js/tinymce/plugins/translate/translate.svg" />');

	// ウィンドウに入力した値
	var post_contents = '';

    // プラグインボタンの追加
    // change: tinymce5対応 see) https://www.tiny.cloud/docs/advanced/creating-a-plugin/
	// editor.addButton("translate", {
    //     icon: "plugin",
	// 	   image: "/js/tinymce/plugins/translate/translate.svg",
    editor.ui.registry.addButton("translate", {
		icon: "translate",
		tooltip: "翻訳",
        // change: tinymce5対応
		// onclick: pluginWin, // コールバック関数
		onAction: pluginWin,

		onPostRender: function() { // プラグイン要素選択時プラグインボタンアクティブ
			var _this = this;
			editor.on("NodeChange", function(e) {
				//var is_active = jQuery( editor.selection.getNode() ).hasClass("ref");
				var is_active = jQuery( editor.selection.getNode() ).hasClass("plugin");
				_this.active( is_active );
			})

			editor.on("DblClick", function(e) {
				//if ( e.target.className == "plugin" || e.target.className=="ref" ) {
				if ( e.target.className == "plugin" ) {
					pluginWin(e.toElement.innerText);
				}
			})
		},
	});

	function pluginWin(e) { // プラグインウィンドウを開く関数
		// eはボタンをクリックした場合オブジェクト、プラグインのコンテンツをダブルクリックした際は文字列が入るので判定のため文字列に一旦変換する
		if (String(e).match(/^(&|#)/)) {

			// プラグインの形式に対応する正規表現（暫定）。
			// ややこしいことにインラインテキストのある無しや{}を二重にしたり、改行の有無最後のセミコロンなしでも動くプラグインがあるなど対応が複雑
			var m = e.match(/^(&|#)(\w+)\((.*)\)([\s\S]*)?/);

			if(typeof(m[4]) !== "undefined"){
				if (m[4].match(/;$/)) { m[4] = m[4].replace(/;$/g, "") }; // インライン要素のあるなしにかかわらず行末の;は削除
			}
			//var inline_block_value = (m[1] === "&") ? "inline" : "block";
		} else {
			var m = new Array("", "", "", "", ""); // ボタンをクリックした際は空のデフォルト値を指定
		}

		tinymce.activeEditor.windowManager.open({
			title: "翻訳（英語に翻訳されます）",
			width: 600,
			height: 250,
            // change: tinymce5対応
			// body: [{
			// 	type: "textbox",
			// 	name: "inline_text",
			// 	multiline: true,
			// 	minHeight: 220,
			// 	classes : "cc-textarea",
			// 	value : editor.selection.getContent(),
			// 	label: ''
			// }],
            body: {
                type: 'panel',
                items: [
                    {
                        // see) https://www.tiny.cloud/docs/ui-components/dialogcomponents/#textarea
                        type: "textarea",
                        name: "inline_text",
                        // value : editor.selection.getContent(),
                        // value : tinymce.activeEditor.getContent(),
                        label: ''
                    }
                ]
            },
            buttons: [
                {
                    type: 'cancel',
                    text: 'Close'
                },
                {
                    type: 'submit',
                    text: 'Save',
                    primary: true
                }
            ],
			onsubmit: function(e) { // OKボタンをクリックした際の挙動
				//if (e.data.plugin_name === "") { // 入力値のバリデーション（簡易版）
				//	tinyMCE.activeEditor.windowManager.alert("プラグイン名が入力されていません。");
				//	return;
				//}

				//alert("XMLHttpRequest");
				xhr = new XMLHttpRequest();
				xhr.withCredentials = false;
				//xhr.open('POST', '/debug/postTest.php');
				xhr.open('POST', '/api/translate/post');

				xhr.onload = function() {
					var json;

					if (xhr.status < 200 || xhr.status >= 300) {
						failure('HTTP Error: ' + xhr.status);
						return;
					}
					//alert(xhr.status);

					json = JSON.parse(xhr.responseText);

					//alert(xhr.responseText);
					//alert(json.return_text);

					//if (!json || typeof json.location != 'string') {
					//	failure('Invalid JSON: ' + xhr.responseText);
					//	return;
					//}

					//success(json.location);

					// サーバから戻ってきたHTMLをエディタ画面に挿入する。
					// console.log(json);
					// console.log(json.link_texts);

					for (var i in json.return_texts) {
						if (!post_contents) {
                            // change: tinymce5対応
							// tinymce.EditorManager.activeEditor.insertContent('<p>' + json.return_texts[i] + '</p>');
							editor.insertContent('<p>' + json.return_texts[i] + '</p>');
						}
						else {
                            // change: tinymce5対応
							// tinymce.EditorManager.activeEditor.insertContent('<p>' + post_contents + '<br />' + json.return_texts[i] + '</p>');
							editor.insertContent('<p>' + post_contents + '<br />' + json.return_texts[i] + '</p>');
						}
					}
				};

				//alert(e.data.file1);
				//console.log(jQuery('.mce-cc-file-upload'));
				//return;

				var tokens = document.getElementsByName("csrf-token");
				//alert(tokens[0].content);

				formData = new FormData();
				//formData.append('plugin_name', e.data.plugin_name);
				formData.append('_token', tokens[0].content);

				// TinyMCE が出力するinputタグにnameがないため、classで選択。classesでの指定はcc-file-uploadだが、TinyMCE が mce- を付けて出力する。
//				formData.append('file1', jQuery('.mce-cc-file-upload')[0].files[0]);
//				formData.append('file2', jQuery('.mce-cc-file-upload')[1].files[0]);
//				formData.append('file3', jQuery('.mce-cc-file-upload')[2].files[0]);
//				formData.append('file4', jQuery('.mce-cc-file-upload')[3].files[0]);
//				formData.append('file5', jQuery('.mce-cc-file-upload')[4].files[0]);

				// type で指定する方法は画面上に他にinput type=file がいるとおかしくなると思うので、classでのセレクタにした。
                // change: tinymce5対応
				// formData.append('inline_text', jQuery('.mce-cc-textarea').val());
				formData.append('inline_text', jQuery('.tox-textfield').val());

				// 入力された内容をグローバル変数に保持
                // change: tinymce5対応
				// post_contents = jQuery('.mce-cc-textarea').val();
				post_contents = jQuery('.tox-textfield').val();

				xhr.send(formData);

				//if (e.data.inline_block === "inline") { var inline_block = ["&", ";"] } else { var inline_block = ["#", ""] }
				//if (e.data.inline_text) { var inline_text = e.data.inline_text; inline_text = inline_text.replace(/\r?\n/g, "<br>"); } else { var inline_text = ""}
				//editor.insertContent( '<span class="plugin" contenteditable="false" style="cursor: default;" data-mce-style="cursor: default;">' + 'テスト' + '(' + e.data.plugin_option + ')' + inline_text + '</span>');
			}
		});
	} // function pluginWin()
});
